ВСТУП

У сучасному світі зростання обсягів вантажоперевезень стає серйозним викликом для логістичних компаній. Традиційні методи паркування вантажівок вже не відповідають потребам часу, адже процес паркування та виїзду може займати багато часу, що призводить до затримок у доставці товарів та зниження ефективності складів. Крім того, існує високий ризик пошкодження фур та складського обладнання під час паркування, що може спричинити значні фінансові втрати. Традиційне паркування вимагає залучення водіїв, що збільшує витрати та підвищує ризики, пов'язані з людським фактором.
Впровадження безпілотних вантажівок та автоматизованих систем паркування стає все більш актуальним завданням. Ці технології здатні зробити вантажоперевезення більш ефективними, безпечними та економічними.[1] По-перше, вони дозволяють значно скоротити час паркування та виїзду фур, що призведе до покращення логістичних процесів та економії коштів. Використання безпілотних вантажівок дозволяє логістичним компаніям оптимізувати витрати та підвищити безпеку перевезення товарів, оскільки виключається людський фактор. Крім того, такі фури можуть працювати цілодобово, що підвищує ефективність їх використання. Автоматизовані системи паркування також сприяють збільшенню пропускної здатності складів та терміналів, що дозволяє обробляти більше вантажів і оптимізувати використання паркувальних місць.
Метою даної курсової роботи є розробка програмної системи для розумної парковки безпілотних ваговозів. Для досягнення цієї мети необхідно створити архітектуру програмної системи, що включає backend, frontend, IoT та mobile компоненти, та реалізувати систему, яка забезпечить автоматизоване паркування безпілотних фур, враховуючи всі необхідні технічні та безпекові аспекти.
Розробка такої системи має значні переваги, зокрема економію часу, підвищення безпеки, зниження витрат та ефективне використання простору.[2] Це робить тему автоматизованого паркування надзвичайно актуальною, адже вона може вирішити багато проблем, з якими стикаються логістичні компанії сьогодні.
Тож, в ході даної курсової роботи буде розроблено програмну систему для розумної парковки безпілотних ваговозів, що дозволить логістичним компаніям значно підвищити ефективність своїх операцій та забезпечити більш безпечне та економічне паркування вантажівок.

1 БІЗНЕС-ВИМОГИ
1.1	Передумови

Сучасний світ динамічно розвивається, що веде до стійкого зростання обсягів вантажоперевезень. Цей тренд генерує нові виклики для логістичних компаній, адже традиційні методи паркування фур стають все менш ефективними та безпечними.
Процес паркування та виїзду фур може займати багато часу, що призводить до затримок у доставці та зниження пропускної здатності складів. Також існує високий ризик пошкодження фур та складського обладнання під час паркування, що може призвести до значних фінансових втрат. Традиційне паркування потребує залучення водіїв, що збільшує витрати логістичних компаній та безпеку вантажу, бо людський фактор може спричинити аварії чи інші небезпечні ситуації.
Тож впровадження безпілотних фур та автоматизованого паркування стає все більш актуальним питанням. Ці технології можуть зробити вантажоперевезення більш ефективними, безпечними та економними.[3] По перше буде можливість значно скоротити час паркування та виїзду фур, що призведе до покращення логістики та економії коштів. Використання безпілотних фур, дозволить логістичним компаніям оптимізувати витрати та підвищити безпечність перевезення товару, бо буде майже повністю виключено людський фактор, а також такі фури можуть перевозити товар цілодобово. Щодо автоматизованої системи паркування, вона може значно збільшити пропускну здатність складів та терміналів, що дозволить обробляти більше вантажів, а також може оптимізувати використання паркувальних місць, розміщуючи фури максимально щільно та безпечно.
Впровадження автоматизованого паркування для безпілотних фур є перспективним напрямком розвитку логістичної галузі. Ця технологія має значні переваги, такі як економія часу, підвищення безпеки, економія коштів та ефективне використання простору.
Вже зараз тема автоматизованого паркування є дуже актуальною, адже вона може вирішити багато проблем, з якими стикаються логістичні компанії.

1.2 Бізнес-можливості

До аналогів нашої програмної системи можна віднести декілька відомих систем.
TuSimple ¬– це система фокусується на розробці самокерованих фур, які можуть їздити без водія на автомагістралях, має систему планування маршрутів, яка оптимізує маршрути для самокерованих фур. А також TuSimple має систему моніторингу, яка відстежує розташування та стан самокерованих фур.
Переваги нашої системи :
–	можливість для автоматичного генерування документації;
–	можливість онлайн бронювання місць, моніторингу та відстеження фур та їх параметрів.
Embark Trucks – це система, яка спеціалізується на автономних вантажних автомобілях, зосереджуючись на розвитку програмного забезпечення та алгоритмів для навігації автомобілів на автострадах. Оператори можуть віддалено моніторити та керувати рухом вантажного автомобіля через спеціальний інтерфейс, що дозволяє вони взаємодіяти з системою. Датчики та відеокамери використовуються для моніторингу дорожнього середовища та виявлення перешкод на дорозі.
Переваги нашої системи :
–	можливість для автоматичного генерування документації, аналітки та звітності;
–	можливість використання системи компаніями, які володіють парковками та складами;
–	можливість онлайн бронювання місць на парковці чи місця для розгрузки.
Einride – це компанія, що розробляє системи автономних вантажних автомобілів. Einride має системи навігації, які дозволяють автомобілю обирати оптимальний маршрут та уникати перешкод на дорозі. Також ця система включає функції контролю швидкості та безпеки, щоб забезпечити безпечний рух автомобіля та уникнути аварій. Оператори можуть віддалено керувати автомобілем та моніторити його рух через спеціальний інтерфейс.
Переваги нашої системи :
–	можливість для автоматичного генерування документації, аналітки та звітності;
–	можливість використання системи компаніями, які володіють парковками та складами;
–	можливість онлайн бронювання місць на парковці чи місця для розгрузки.
Отже наша система пропонує комплексний підхід до паркування, розгрузки та управління безпілотними фурами, на відміну від аналогів, які фокусуються лише на певних аспектах. Наш програмний продукт включає бронювання місць, моніторинг та відстеження фур, автоматичне генерування документації, аналітику та звітність. Найбільшою нашою перевагою є тещо наша система доступна не лише логістичним компаніям, але й власникам парковок та складів, які бажають автоматизувати процеси паркування та розгрузки безпілотних фур.[4] Завдяки комплексному підходу, ширшому спектру функцій, гнучкості, масштабованості, ефективності, безпеці, доступності та інноваційним технологіям, наш продукт стає найкращим вибором для логістичних компаній, власників парковок та складів.
Майбутня модель монетизації нашого програмного продукту може включати декілька пунктів:
–	Корпоративний сегмент: для компаній з сектора перевезень і логістики, ми можемо впроваджувати корпоративні пакети зі спеціальними можливостями та обслуговуванням. Також ми можемо стягувати плату за кожну фуру або склад, який використовує нашу систему.
–	Сервіс та обслуговування: надання послуг технічної підтримки, оновлень та сервісу для датчиків та програми також є джерелом доходу.
На сьогоднішній день існує серйозна проблема в сфері перевезення, процес паркування та виїзду фур може займати багато часу, що призводить до затримок у доставці та зниження пропускної здатності складів. Також існує високий ризик пошкодження фур та складського обладнання під час паркування, що може призвести до значних фінансових втрат. Традиційне паркування потребує залучення водіїв, що збільшує витрати логістичних компаній та безпеку вантажу, бо людський фактор може спричинити аварії чи інші небезпечні ситуації. Ринок вантажоперевезень постійно розширюється та включає в себе два ключових сегменти:
–	Корпоративний сегмент: логістичні компанії та компанії/власники парковок та складів. Для оптимізації використання їхніх ресурсів та підвищення доходів.
–	Глобальна розгорнутість: продукт може бути орієнтований на глобальний ринок, оскільки ефективне вантажоперевезення є важливою проблемою в усьому світі.
Наш проект вирішує ряд проблем, з якими стикаються логістичні компанії, власники парковок та складів. Наша система автоматизує процеси паркування та розгрузки безпілотних фур, що економить час та кошти логістичних компаній. Використання цієї системи може дати логістичним компаніям значну конкурентну перевагу. Наш програмний проект допомагає власникам парковок та складів оптимізувати використання їхніх ресурсів, що може призвести до збільшення доходів, а також робить володіння парковками та складами більш рентабельним бізнесом.

1.3 Бізнес-цілі та критерії успіху

BO-1: Автоматизувати процеси паркування та розгрузки безпілотних фур, для безпечнішого паркування та покращення логістики.
SC-1: Зменшити кількість аварій під час паркування на 20% протягом першого року використання програмного продукту.
BO-2: Зменшити витрати на обслуговування складів, парковок та фур, знизивши витрати на логістику.
SC-2: Заощадити 30% від загальних витрат на обслуговування фур, складів та парковок протягом перших двох років використання програмного продукту.
BO-3: Залучити корпоративних клієнтів, привернувши корпоративних клієнтів з сектору перевезень та логістики, які шукають рішення для контролю за безпекою транспорту, складів та парковок.
SC-3: Підписати договори на користування програмним продуктом з не менше ніж 20 крупними логістичними компаніями, та компаніями чи власниками парковок та складів протягом перших 12 місяців.
BO-4: Розширити глобальний ринок, розширившии географію використання програмного продукту на міжнародний ринок.
SC-4: Зареєструвати користувачів з не менше ніж 5 різних країн і обсяг користувачів за кордоном повинен становити не менше 30% від загальної кількості користувачів протягом перших 24 місяців.
BO-5: Забезпечити стійкий потік доходу, забезпечивши стабільний потік доходу для компанії.
SC-5: Досягнути щорічного прибутку, що зростає на 15% протягом перших трьох років експлуатації програмного продукту.
Метрики успіху:
–	Кількість аварій та нещасних випадків під час паркування та вантажоперевезення.
–	Кількість проблем, які виникають під час логістики та звітності.
–	Рівень задоволеності клієнтів, вимірюваний анкетами та зворотнім зв'язком.
–	Загальний дохід, зароблений від продажу продукту.

1.4 Потреби клієнтів або ринку

Потреби та вимоги корпоративних клієнтів (логістичні компанії та компанії, які володіють парковками та складами):
–	Корпоративні клієнти бажають зменшити кількість аварій та пошкодження обладнання під час парковки, щоб зменшити втрати і зберегти репутацію.
–	Покращення логістики вантажоперевезень, а також генерування звітності та аналітики.
–	Можливість відстежувати та управляти фурою у режимі реального часу.
–	Оптимізація використання ресурсів складів та парковок.
–	Можливість відстежувати параметри фури, а також заповненість складів та парковок у реальному часі.
Потреби, які ще не задовольняються:
–	Наявні системи контролю за фурою, складами та парковками не завжди надають можливість відстежувати їх стан в реальному часі з необхідною точністю.
–	Більшість існуючих систем не мають автоматизованої звітності та аналітики
Отже, наша програма надає можливість відстежувати стан фури та заповненість складів та парковок в реальному часі з високою точністю, що відповідає потребам корпоративних клієнтів. Система має автоматизацію процесу генерації звітів та аналітики, що забезпечує надійну та зручну роботу для клієнтів.

1.5 Бізнес-ризики

Під час розробки та реалізації проекту існують деякі основні бізнес-ризики, які потрібно враховувати:
–	Конкуренція: на ринку існує конкурентна конкуренція в області систем розумної парковки. Інші компанії можуть випускати аналогічні продукти, що може вплинути на ринкову частку.
–	Наявність аналогічних рішень: клієнти можуть вже мати аналогічні рішення або використовувати існуючі системи парковки. Це може ускладнити впровадження нового продукту.
–	Питання термінів реалізації: затримки у розробці та впровадженні продукту можуть призвести до втрати ринкових можливостей і конкурентного переваги.
–	Зміни в регулюючому середовищі: зміни в законодавстві та нормативах, пов'язаних із захистом даних та приватністю перевезень, можуть створити додаткові вимоги для продукту та вимагати адаптації.
–	Важкість впровадження: успішне впровадження системи на складах та парковках може вимагати співпраці з виробниками їх обладнання, що може бути складним і тривалим процесом.
Оцінка ризиків:
–	Конкуренція: середній рівень серйозності. Важливо розробити ефективну маркетингову стратегію та продемонструвати переваги свого продукту.
–	Наявність аналогічних рішень: середній рівень серйозності. Потрібно ретельно вивчити конкурентів та розробити продукт, який виходить за межі існуючих рішень.
–	Питання термінів реалізації: високий рівень серйозності. Необхідно розробити реалістичний графік реалізації та дотримуватися його.
–	Зміни в регулюючому середовищі: середній рівень серйозності. Потрібно слідкувати за змінами у законодавстві та вчасно адаптувати продукт до нових вимог.
–	Важкість впровадження: середній рівень серйозності. Необхідно активно співпрацювати з виробниками обладнання для складів та парковок для забезпечення успішного впровадження.
Заходи щодо зменшення ризиків:
–	Маркетингова стратегія: розробити сильну маркетингову стратегію для виділення продукту серед конкурентів.
–	Інновації: постійно розвивати продукт та надавати нові функції, що роблять його унікальним.
–	Гнучкість у розробці: використовувати гнучкі методи розробки для швидкого реагування на зміни вимог та регулюючого середовища.
–	Співпраця: активно співпрацювати виробниками обладнання для полегшення впровадження продукту.

2 КОНЦЕПЦІЯ РІШЕННЯ
2.1 Окреслення концепції

Мета проекту полягає в розробці та впровадженні комплексного рішення для автоматизації паркування та розгрузки безпілотних фур. Основною задачею є полегшення роботи логістичних компаній, складів та парковок шляхом забезпечення ефективної організації розташування та доступності місць для паркування та розгрузки фур. Ця система спрямована на зменшення витрат часу та коштів, пов'язаних з паркуванням та розвантаженням фур, а також на підвищення безпеки та ефективності цих процесів.
Впровадження системи призведе до:
–	Зменшення аварій та пошкодження обладнання під час парковки.
–	Покращення логістики, швидкості та безпечності вантажу під час перевезень.
–	Підвищення контролю за безпілотними фурами та наповненістю складів та парковок, яке стане доступним для корпоративних клієнтів.
–	Забезпечення надійної системи, яка враховує потреби різних клієнтів і відображає розвиток проектної організації.

2.2 Головна функціональність

Перелік основних функцій нового продукту містить такі функції.
MF-1: Інформація про доступні місця для розгрузки або паркування у реальному часі. Програмний продукт використовує датчик для перевірки наявності транспорту на місці.
MF-2: Можливість фільтрування місць за різними критеріями для знаходження оптимального місця. Програмний продукт використовує датчик, який вимірює параметри фури, та за цими даними система підбирає доступні місця для парковки.
MF-3: Можливість бронювання місць заздалегідь для гарантує доступності у потрібний час. Менеджер може обрати потрібне місце з доступних на певний час.
MF-4: Автоматичне генерування документації щодо розгрузки та паркування. Менеджер може завантажувати накладні у системи, а власники складів, можуть їх  копіювати собі, підписувати та вносити свої дані.
MF-5:  Надсилання сповіщень про статус розгрузки або паркування на телефон. Після успішної парковки чи розгрузки менеджер буде отримувати сповіщення на мобільний додаток про це.
MF-6: Запис та архівування даних. Усі звіти зберігаються в архіві для подальшого аналізу.
MF-7: Прогнозування часу очікування та надання альтернативних місць у разі затримки.
MF-8: Оновлення статусу фури на складі у реальному час. Система буду повідомляти менеджер про стан фури, вона очікую розвантаження, розвантажується чи вже розвантажена, чи завантажується.
MF-9: Оновлення аналітики щодо складів та парковок у реальному час. Система буду повідомляти власників парковок та складів про кількість вільних місць, статистику щодо популярність певних місць та популярності певних часів.
MF-10: Підтримка індивідуальних налаштувань. Продукт дозволяє користувачам налаштовувати параметри контролю відповідно до їхніх потреб та вимог.
MF-11: Аналітика вантажоперевезення. Програмний продукт надає користувачам аналітичні звіти щодо усіх парковок, розгрузок та загрузок фури та їх вартість та часозатратність, що допомагає поліпшити ефективність вантажоперевезень.
Ця головна функціональність дозволить користувачам контролювати за станом складів, парковок та фур, забезпечуючи безпеку та ефективність паркування та перевезень.

2.3 Припущення та залежності

Припущення:
–	Користувачі мають доступ до стабільного Інтернет-з'єднання для взаємодії з програмним продуктом та отримання оновлень.
–	Доступ до даних місць паркови чи загрузки. Парковочні місця мають підтримку для зчитування параметрів фури та її наявності.
Залежності:
–	Співпраця з виробниками обладнання складів та парковок. Реалізація проекту вимагає співпраці з виробниками для інтеграції системи в їхні технічні рішення.
–	Стабільність партнерських відносин. Партнерські відносини з іншими компаніями та постачальниками, зокрема технологічними рішеннями та Інтернет-послугами, є важливими для забезпечення функціональності системи.
–	Функціонування системи моніторингу може бути обмеженим або неможливим у випадках, коли власник парковки або складу вимикає або блокує доступ до датчика.
Ці припущення та залежності важливі для успішного розгортання та використання програмного продукту. Підтримка співпраці зі сторонніми постачальниками та надійне Інтернет–з'єднання є критичними для коректної роботи системи автоматизованої парковки для безпілотних фур.

3 РАМКИ ТА ОБМЕЖЕННЯ ПРОЕКТУ
3.1 Рамки первинного випуску

Функціонал системи можна розподілити між різними її частинами.
Клієнтський додаток буде розроблений для операційної системи Android, використовуючи Kotlin для програмування.
Основна його функціональність:
–	Можливість перегляду інформація про доступні місця для розгрузки або паркування.
–	Можливість бронювання місць для парковки.
–	Можливість генерування документації щодо розгрузки/загрузки та паркування.
–	Можливість отримування сповіщень про статус розгрузки/загрузки або паркування.
–	Можливість перегляду усіх звітів.
–	Можливість перегляду статистики для власників фур, складів та парковок.
–	Можливість перегляду прогнозованого часу очікування та надання альтернативних місць у разі затримки.
–	Можливість перегляду статусу фури на складі.
–	Можливість перегляду аналітики щодо складів та парковок.
Серверна частина буде розгорнута на серверах, які працюють під управлінням операційної системи Windows. Для зберігання даних використовуватиметься реляційна Система Управління Базами Даних (СУБД), така як MySQL. Реалізація серверної частини буде виконана з використанням мови програмування Java та фреймворку Spring для забезпечення взаємодії з клієнтськими додатками.[5] Для веб-інтерфейсу використовуватимуться HTML, CSS та Angular. Взаємодія з серверною частиною буде здійснюватися через REST API.
Основна функціональність:
–	Можливість перегляду інформація про доступні місця для розгрузки або паркування.
–	Можливість фільтрації місць за параметрами фури для знаходження оптимального місця для парковки.
–	Можливість бронювання місць для парковки.
–	Можливість додавання нових місця для парковки ат їх парметрів.
–	Можливість генерування документації щодо розгрузки/загрузки та паркування.
–	Можливість перегляду усіх звітів.
–	Можливість перегляду статистики для власників фур, складів та парковок.
–	Можливість перегляду прогнозованого часу очікування та надання альтернативних місць у разі затримки.
–	Можливість перегляду статусу фури на складі.
–	Можливість перегляду аналітики щодо складів та парковок.
Бізнес-логіка програмного продукту буде включати в себе обробку та аналіз даних, визначення параметрів фури на основі датчиків, відправку сповіщень та виконання команд для забезпечення безпеки під час паркування. Реалізація бізнес-логіки включатиме в себе алгоритми обробки даних, визначення ризиків та видачу рекомендацій, сповіщення та комунікацію з клієнтськими додатками та веб-інтерфейсом через REST API.
Заходи забезпечення безпеки включатимуть в себе шифрування даних, автентифікацію користувачів OAuth2, контроль доступу.
Розробка буде проводитися з дотриманням кращих практик у галузі програмування та інформаційної безпеки з метою забезпечення надійності та ефективності роботи системи.

3.2 Рамки наступних випусків

Наступні випуски програмного продукту передбачають розширення функціональності та впровадження нових можливостей для поліпшення розумної парковки. Основними функціями, які планується реалізувати в майбутніх випусках, є:
–	Розширені алгоритми аналізу даних для більш точного виявлення параметрів фури.
–	Покращена взаємодія з обладнанням парковок та складів для більш детального моніторингу параметрів фури.
–	Підтримка інтеграції з більшою кількістю складів та парковок.
–	Реалізація API для співпраці з іншими сервісами та додатками.
–	Покращення інтерфейсу користувача. Оновлення інтерфейсу для зручності користувачів та адміністраторів.
–	Впровадження додаткових функцій для відображення даних та звітів.
Рамки наступних випусків передбачають поетапне розширення функціональності, що сприятиме покращенню парковки безпілотних фур та забезпечить більшу безпеку та ефективну парковку та вантажоперевезення.

3.3 Обмеження та винятки

В рамках розробки цього продукту, важливо визначити обмеження та винятки, що стосуються функціональності та можливостей продукту. Визначення цих обмежень допоможе уникнути непорозумінь та надійно встановити очікування користувачів та зацікавлених сторін.
Обмеження:
–	Обмежена підтримка платформ: система підтримується та оптимізується лише для певних операційних систем, браузерів або пристроїв (наприклад, підтримка Android, але не iOS).
–	Масштабність: система може не забезпечувати масштабування на велику кількість одночасних користувачів, що може призвести до зниження продуктивності при великому навантаженні.
–	Доступність мережі: для коректної роботи системи необхідний стабільний доступ до Інтернету або мережі, тому відсутність зв'язку може обмежити функціональність.
Винятки:
–	Помилки автентифікації: при введенні невірних облікових даних користувач може бачити повідомлення про помилку та отримувати можливість повторити спробу входу.
–	Перевантаження серверів: у разі, якщо сервери перевантажені, користувачі можуть отримувати повідомлення про затримки та очікування, але система буде автоматично спробувати обробити їхні запити пізніше.
–	Помилки з'єднання: у випадку втрати з'єднання з сервером (наприклад, через проблеми з Інтернет-з'єднанням), користувач може бачити повідомлення про неможливість з'єднання та пропозицію перевірити з'єднання.
–	Обмежена мовна підтримка: якщо користувачі намагаються встановити мову, яка не підтримується системою, вони можуть побачити повідомлення про те, що ця мова недоступна.
Ці обмеження та винятки передбачені з метою якнайкращого врахування реальних умов та користувацьких вимог при експлуатації системи.

4 БІЗНЕС-КОНТЕКСТ
4.1 Профілі зацікавлених сторін

Зацікавлені сторони представляють індивідуальні особи, групи або організації, які взаємодіють активно або мають частку в участі в проекті, впливаючи на його результати або їм піддаються. Визначення профілів зацікавлених сторін є важливим етапом розробки проекту і допомагає краще зрозуміти їх потреби та очікування. Профілі зацікавлених сторін ідентифікують клієнтів цього продукту, а також інших зацікавлених сторін та вказують їхні основні інтереси у цьому проекті (таблиця 1).
Таблиця 1 – Пріоритети проекту
Зацікавлена сторона	Обмеження	Основні інтереси	Ставлення до продукту	Основна цінність
Компанії-перевізники	Технічні обмеження	Підвищення безпеки вантажу. Покращення логістики та пришвидшення перевезень. Ціль скоротити витрати на програмне забезпечення. Оптимізація своїх бізнес-процесів завдяки продукту.	Очікують покращення логістики та безпеки вантажу.
	Система автоматизації логістики
Компанії/власники складів та парковок	Технічні обмеження	Підвищення безпеки обладнання. Покращення логістики та пришвидшення розвантаження/завантаження та парковки фур. Оптимізація своїх бізнес-процесів завдяки продукту.	Очікують покращення паркування фур.
	Система автоматизації паркування
Регулюючі органи	Законодавчі обмеження	Підвищення безпеки перевезень та парковки	Очікують дотримання законодавства та зменшення аварій на парковках	Забезпечення відповідності законодавству та підвищення безпеки
Ця таблиця надає інформацію про зацікавлені сторони у проекті програмного продукту для контролю стану водія, їх обмеження, основні інтереси, ставлення до продукту та основну цінність, яку вони очікують від системи контролю.

4.2 Пріоритети проекту

Пріоритети проекту визначають, які аспекти проекту є найважливішими та піддані перевірці та керуванню для забезпечення успішного завершення проекту. Кожен з цих пріоритетів має свої характеристики та обмеження.
Бюджет:
–	Ліміт на витрати: допустиме перевищення бюджету не повинно перевищувати 10% від загального бюджету проекту. Це обмеження важливе для забезпечення фінансової дисципліни та ефективного використання ресурсів.
–	Моніторинг витрат: регулярно перевіряти стан бюджету та витрати.
Час:
–	Завершення в рамках графіку: закінчення проекту повинно відбутися відповідно до затвердженого графіку. Це особливо важливо для дотримання термінів поставки та відповідності запланованим термінам.
–	Керування строками: регулярно моніторити виконання графіку та реагувати на можливі затримки.
Якість:
–	Висока якість продукту: якість програмного продукту є найважливішою. Всі розроблені функції та можливості повинні відповідати вимогам та стандартам якості.
–	Тестування і контроль якості: проведення тестування та контролю якості є обов'язковими етапами розробки.
Функціональність:
–	Реалізація ключових функціональних можливостей: перший випуск продукту повинен включати всі ключові функціональні можливості (Major Features), які були специфіковані в вимогах.
–	Додаткові функції та покращення: зауваження та ідеї щодо додаткових функцій можуть бути включені у майбутні релізи.
Розмір команди:
–	Максимальний розмір команди: Розмір розробницької команди обмежено 10 особами. Це обмеження спрямоване на забезпечення ефективного спілкування, координації та управління завданнями.
Незавершеність проекту:
–	Допустимий рівень незавершеності: На момент випуску продукту допустимий рівень незавершеності не повинен перевищувати 5% від загальної кількості основних функцій (Major Features).
Ці пріоритети є важливими для успішного завершення проекту та досягнення максимальної результативності при обмеженнях бюджету, часу та ресурсів. Збалансований підхід до цих пріоритетів допоможе досягнути успіху.

4.3 Робоче середовище

Проект буде функціонувати в різних робочих середовищах, включаючи мобільні пристрої, серверні системи для обробки та аналізу даних, інтернет-портали для користувачів та операторів.
Мобільні пристрої: клієнтський додаток буде підтримувати операційні системи Android на сучасних смартфонах та планшетах.
Сервери: для обробки та аналізу даних будуть використовуватися сервери, які працюють під управлінням Windows. Для забезпечення масштабованості та надійності серверна інфраструктура буде побудована з використанням хмарних послуг.
Бази даних: для зберігання даних буде використовуватися реляційна Система Управління Базами Даних (СУБД), MySQL.
Програмні мови та фреймворки: додаток розроблятиметься з використанням мов програмування Java для серверної частини та Kotlin (Android) для клієнтської частини. Для реалізації веб-інтерфейсу будуть використані HTML, CSS та JavaScript. Фреймворки, такі як Spring (для Java) та Angular (для веб-інтерфейсу), будуть використовуватися для спрощення розробки та підтримки.
Мережеві протоколи: взаємодія між клієнтами, серверами та датчиками відбуватиметься через мережеві протоколи, такі як HTTP та HTTPS для забезпечення безпеки передачі даних.
Захист даних: для забезпечення безпеки та цілісності даних будуть використовуватися шифрування та механізми автентифікації OAuth2. Передбачено використання сертифікатів для ідентифікації серверів та клієнтів.
Масштабованість: проект повинен бути готовий до масштабування, і архітектура буде побудована з урахуванням можливості додавання нових серверів та підсистем для підтримки зростання користувачів та обсягів даних.
Доступність і продуктивність: для забезпечення доступності системи планується використовувати резервне копіювання даних, балансування навантаження та моніторинг роботи серверів. Щодо продуктивності, оптимізація коду та використання кешування допоможе забезпечити швидку відповідь системи.
Локалізація: додаток повинен бути готовий до локалізації для різних мов та регіонів.
Робоче середовище проекту буде враховувати потреби щодо доступності, надійності, продуктивності та безпеки, а також забезпечуватиме масштабованість та можливість локалізації для різних ринків.

5 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ
5.1 Архітектура системи

Spring Boot обрано як основний фреймворк для розробки серверної частини системи. Він забезпечує швидку конфігурацію, дозволяючи швидко створювати потужні додатки Java. Для автентифікації та авторизації користувачів використовується механізм OAuth2 з використанням JWT (JSON Web Tokens). JWT токени використовуються для забезпечення безпеки та контролю доступу до ресурсів. Паролі користувачів шифруються за допомогою BCryptPasswordEncoder, що забезпечує високий рівень безпеки. Це дозволяє захистити паролі від несанкціонованого доступу та зберігати їх у безпечному форматі. Для зберігання даних використовується MySQL як реляційна база даних. Для легкого налаштування та роботи з MySQL використовується Docker Compose. Spring Boot додаток приймає та обробляє запити від клієнтів, виконує бізнес-логіку та взаємодіє з базою даних через Hibernate та JPA. Hibernate і JPA використовуються для роботи з об'єктно-реляційним відображенням в базі даних та спрощують роботу з даними через об'єктно-орієнтовану модель. Також в проекті використовується Liquibase для керування міграціями бази даних, дозволяючи зберігати та виконувати версіоновані скрипти для структури бази даних. Система має можливість експорту та імпорту бази даних. Ця функціональність дозволяє зберігати та відновлювати дані з бази даних, що забезпечує безпеку та надійність системи. Усі дані в проекті обробляються з використанням кодування UTF-8.[6] Це дозволяє коректно обробляти різноманітні символи та забезпечує сумісність з різними мовами та алфавітами. Для підтримки різних мов та культур використовується механізм локалізації повідомлень. Повідомлення можуть бути переведені на різні мови, залежно від налаштувань користувача. Використання ISO 8601 в проекті відповідає міжнародним стандартам та рекомендаціям, що сприяє сумісності програмного забезпечення з іншими системами та середовищами. Клієнти (Frontend, Мобільні додатки тощо) взаємодіють з бекендом через REST API, надсилаючи HTTP-запити. Усі компоненти системи та їх зв’язки між собою зображено на діаграмі розгортання (див. Додаток А).
Серверна частина програмної системи побудована за структурою: Модель-Контролер-Сервіс (Model-Controller-Service) або MVC, цю структуру можна переглянути на діаграмі пакетів (див. Додаток А).  MVC дозволяє розділити логіку додатку на три ключові компоненти: модель, контролери та сервіси, що спрощує управління кодом та розуміння системи. Розділена структура дозволяє додавати нові функції або змінювати існуючі, мінімізуючи взаємозалежність між компонентами. Серверна частина програмної системи розподілена по таким пакетам : Пакет "Сервіси (Services)" містить класи, які містять бізнес-логіку додатка. Сервіси виконують конкретні операції над даними та обробляють їх відповідно до бізнес-правил.
Пакет «Репозиторії (Repositories)» містить класи, які взаємодіють з базою даних для виконання операцій CRUD (створення, читання, оновлення, видалення) над об'єктами.
Пакет «Контролери (Controllers)» містить контролери , які відповідають за обробку запитів від клієнтів, виклик сервісів та повернення відповідей клієнтам.
Пакет «Моделі (Models)» містить моделі, які відображають структуру даних додатка. Вони відображають об'єкти з бази даних та дані, які передаються через API.
 Пакет «Конфігурація (Configuration)» міститися класи, які налаштовують різні аспекти додатка: підключення до бази даних, налаштування бібліотек, зберігання констант.
Пакет «Валідація (Validation)» містить класи та утиліти для перевірки валідності даних які отримують контролери.
Пакет «Помилки (Exceptions)» містить створенні власні помилки та їх перехоплювачі. Можливість створювати власні помилки дозволяє більш точно описувати та обробляти виняткові ситуації, що виникають у додатку.
Серверна частина використовує пакетну структуру для організації класів за їх функціональністю, де кожен пакет відповідає за певний аспект додатку. Ця архітектурна структура полегшує розуміння, розширення та підтримку проекту, допомагаючи зберігати код організованим і керованим.

5.2 Структура бази даних

Для зберігання даних використовується MySQL як реляційна база даних. Для проектування бази даних попередньо була розроблена ER-діаграма (див. Додаток А).
База даних складається з 12 таблиць: користувачі (Users), адміністратори (Admins), менеджери ваговозів (TruckManagers), менеджери парковок (ParkingManagers), ваговози (Trucks), місця для паркування (ParkingPlaces), накладні (Invoices),  товари (Items), компанії (Companies), компанії ваговозів (TruckCompanies), компанії парковок (ParkingCompanies), історія бази даних (DatabaseHistory).
У базі даних наявні наступні зв’язки між сутностями:
–	користувач та адмін один до одного;
–	користувач та менеджер ваговозів один до одного;
–	користувач та менеджер парковок один до одного;
–	компанія та компанія ваговозів один до одного;
–	компанія та компанія парковок один до одного;
–	менеджер ваговозів та ваговоз один до багатьох;
–	менеджер парковок та місце для паркування один до багатьох;
–	менеджер ваговозів та компанія ваговозів один до одного;
–	менеджер парковок та компанії парковок один до одного;
–	менеджер ваговозів та накладна один до багатьох;
–	менеджер парковок та накладна один до багатьох;
–	місце для паркування та накладна один до багатьох;
–	ваговіз та накладна один до багатьох;
–	накладна та товар один до багатьох.

5.3 Бізнес логіка

Основний функціонал  реалізує логіку системи для розумної парковки безпілотних ваговозів, яка надає можливість ввести зручно документацію, обирати місця для паркування та відстежувати параметри ваговозів та місць у реальному часі. На діаграмі прецедентів відображено основну логіку серверної системи, функціональність системи та взаємодію користувачів з нею (див. Додаток А). Основні функції реалізовані у додатку:
–	Авторизація за допомогою OAuth2 з використанням JWT токенів, що дозволяє захищати ресурси та контролювати доступ до них з використанням токенів авторизації, що забезпечує безпеку та контроль над даними. Налаштування безпеки системи розташовані у пакеті з конфігурацією у класі WebSecurityConfig.java.
–	Можливість адмінів переглядати усіх водіїв та менеджерів та видаляти їх, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість адмінів переглядати затверджених та відхилених адмінів, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість адмінів додавати адмінів, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість адмінів робити експорт та імпорт бази даних, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість головного адміна переглядати історію операцій над базою даних, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість головного адміна затверджувати та відхиляти нових адмінів, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Менеджери ваговозів мають можливість додавати, переглядати та оновлювати інформацію про ваговози, ця логіка реалізовано у сервісі TruckServiceImpl.java.
–	Менеджери парковок мають можливість додавати, переглядати та оновлювати інформацію про місця для паркування, ця логіка реалізовано у сервісі ParkingPlaceServiceImpl.java.
–	Менеджери ваговозів можуть виконати пошук найкращого місця для ваговоза для паркування на певній парковці, пошук відбувається за параметрами ваговозу та місця для паркування та за допомогою формули розраховується кут заїзду до місця й враховуючі ці дані обирається найкраще місце, ця логіка реалізована у методі, наведеному у класі ParkingManagerServiceImpl.java.
–	Менеджери ваговозів мають можливість створювати різних типів (паркування, завантаження, вивантаження) накладні, ця логіка реалізована у сервісі InvoiceServiceImpl.java.
–	Менеджери можуть підписувати накладні, спочатку менеджер парковки, а потім лише менеджер ваговоза, ця логіка реалізовано у сервісі InvoiceServiceImpl.java.
–	Менеджери ваговозів можуть отримувати інформацію в реальному часі про показники/параметри ваговозі, ця логіка реалізовано у сервісі TruckServiceImpl.java.
–	Менеджери парковки можуть отримувати інформацію в реальному часі про показники/параметри місць для паркування, ця логіка реалізовано у сервісі ParkingPlaceServiceImpl.java.
Описані функції відображають основні можливості та процеси, які автоматизують  контроль за документацією та станом ваговозів та місць для паркування та запобігає надзвичайним ситуаціям, що можуть виникнути в під час паркування за допомогою розрахунку найкращого місця для паркування за допомогою параметрів та визначення кута заїзду.
Під час реалізації цього функціоналу було дотримано правил чистого коду.
Принцип SOLID: Застосування цих принципів для створення коду, який є гнучким, легко розширюється та підтримується.
CamelCase та описові назви: Дотримання назв класів, методів та змінних з CamelCase та використання описових назв, які чітко відображають їхню функціональність.
Форматування коду: Використання стандартних правил форматування, правильна відступів, розташування дужок тощо.
Використання іменованих конвенцій Spring: Використання конвенцій іменування для створення контролерів, сервісів, репозиторіїв і т. д. у Spring, таких як AdminController, AdminService, AdminRepository.
Використання компонентної архітектури Spring: Розділення коду на компоненти, використання анотацій Spring для правильного управління залежностями та іншими аспектами.
Безпека: Застосування засобів безпеки, таких як Spring Security, для захисту ресурсів.

5.4 Специфікація запитів

Клієнти взаємодіють з сервісною частиною через REST API, надсилаючи HTTP-запити. REST API в проекті складається із 63 запитів. Кожний запит відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного запиту наведена у таблиці 1.
Таблиця 1 – Специфікація REST API
Об’єкт	Метод	Посилання	Опис
Користувач	POST	/login	Вхід до системи
Всі адміни	GET	/api/admins/{admin-id}	Отримання профілю адміна
	POST	/api/admins/{admin-id}/add/{email}	Додавання адміна
	GET	/api/admins/{admin-id}/truck-managers	Отримання усіх менеджерів ваговозів
	GET	/api/admins/{admin-id}/parking-managers	Отримання усіх менеджерів парковок
	DELETE	/api/admins/{admin-id}/truck-managers/{truck-manager-id}	Видалення менеджера ваговозів
	DELETE	/api/admins/{admin-id}/parking-managers/{parking-manager-id}	Видалення менеджера парковок
	GET	/api/admins/approved	Отримання усіх затверджених адмінів
	GET	/api/admins/not-approved	Отримання усіх не затверджених адмінів
	GET	/api/admins/{admin-id}/db/export	Експорт бази даних
	POST	/api/admins/{admin-id}/db/import	Імпорт бази даних
Головний адмін	POST	/api/admins/{admin-id}/approve/{new-admin-id}	Затвердження нового адміна
	POST	/api/admins/{admin-id}/decline/{new-admin-id}	Відхилення нового адміна
	GET	/api/admins/{admin-id}/db/history	Перегляд історії операцій над базою даних
Адмін	PATCH	/api/admins/{admin-id}	Оновлення профілю адміна
Менеджер ваговозів	POST	/api/truck-manager/register	Реєстрація менеджера ваговозів
	GET	/api/truck-manager/{user-id}	Отримання профілю менеджера ваговозів
	PATCH	/api/truck-manager/{user-id}	Редагування профілю менеджера ваговозів
	DELETE	/api/truck-manager/{user-id}	Видалення менеджера ваговозів
	POST	/api/truck-manager/{user-id}/trucks	Додавання ваговозу
	GET	/api/truck-manager/{user-id}/trucks/{truck-id}	Отримання профілю ваговозу
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}	Оновлення профілю ваговоза
	DELETE	/api/truck-manager/{user-id}/trucks/{truck-id}	Видалення ваговозу
	GET	/api/truck-manager/{user-id}/trucks	Отримання усіх ваговозів компанії
	GET	/api/truck-manager/{user-id}/trucks/without-manager	Отримання усіх ваговозів компанії без менеджера
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/remove-manager	Видалення менеджера ваговозу
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/add-manager	Додавання менеджера ваговозу
	PATCH	/api/truck-manager/{user-id}/company/{company-id}	Зміна компанії менеджера ваговозів
	GET	/api/truck-manager/{user-id}/trucks/{truck-id}/companies/{company-id}/search-place	Пошук найкращого місця для ваговозу
	POST	/api/truck-manager/{user-id}/invoices	Створення накладної
	PATCH	/api/truck-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером ваговозів
	GET	/api/truck-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
	GET	/api/truck-manager/{user-id}/invoices	Отримання усіх накладних менеджера ваговозів
	GET	/api/truck-manager/{user-id}/invoices/truck-number/{truck-number}	Пошук накладної за номером ваговозу
	GET	/api/truck-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
	GET	/api/truck-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
	GET	/api/truck-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів
Менеджер парковок	POST	/api/parking-manager/register	Реєстрація менеджера парковок
	GET	/api/parking-manager/{user-id}	Отримання профілю менеджера парковок
	PATCH	/api/parking-manager/{user-id}	Редагування профілю менеджера парковок
	DELETE	/api/parking-manager/{user-id}	Видалення менеджера парковок
	PATCH	/api/parking-manager/{user-id}/company/{company-id}	Зміна компанії менеджера парковок
	POST	/api/parking-manager/{user-id}/parking-places	Додавання місця для паркування
	GET	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Отримання профілю місця для паркування
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Оновлення профілю місця паркування
	DELETE	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Видалення місця паркування
	GET	/api/parking-manager/{user-id}/parking-places	Отримання усіх місць для паркування компанії
	GET	/api/parking-manager/{user-id}/parking-places/without-manager	Отримання усіх місць для паркування без менеджера компанії
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}/remove-manager	Видалення менеджера місця для паркування
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}/add-manager	Додавання менеджера місця паркування
	PATCH	/api/parking-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером парковок
	GET	/api/parking-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
	GET	/api/parking-manager/{user-id}/invoices	Отримання усіх накладних менеджера парковок
	GET	/api/parking-manager/{user-id}/invoices/place-number/{place-number}	Пошук накладної за номером місця паркування
	GET	/api/parking-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
	GET	/api/parking-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
	GET	/api/parking-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів
Компанія ваговозів	POST	/api/truck-company/register	Реєстрація компанії ваговозів
	GET	/api/truck-company/search	Пошук компанії ваговозів за назвою
	PATCH	/api/truck-manager/{user-id}/truck-company/{company-id}	Оновлення профілю компанії ваговозів
Компанія парковок	POST	/api/parking-company/register	Реєстрація компанії парковок
	GET	/api/parking-company/search	Пошук компанії парковок за назвою
	PATCH	/api/parking-manager/{user-id}/parking-company/{company-id}	Оновлення профілю компанії парковок

6 РОЗРОБКА РОЗУМНОГО ПРИСТРОЮ
6.1 Архітектура системи та бізнес логіка

Функціонал розумного пристрою реалізовано за допомогою таких технологій як Arduino, C++, Python, REST. Логіка полягає у передачі даних від датчиків, зокрема датчики температури та звуку (див. Рисунок 1), їх аналізі та обробки.
Рисунок 1 – Розумний пристрій
Архітектура системи включає в себе фізичну і логічну організацію компонентів програмної системи та їх взаємодію. У системі ми маємо дві основні частини: Arduino та серверний додаток на Python. Так як мій Arduino пристрій не має можливості передавати дані через Wifi, тож передачу даних було реалізовано за допомогою компорту.  Код Arduino написаний на С++  взаємодіє з датчиками температури та звуку, вимірює значення цих датчиків і надсилає їх через Serial порт до серверного додатка на Python. Arduino також відповідає за обробку даних, а саме спочатку дані отримані від датчиків переводяться за допомогою математичного методу з одного діапазону значень в інший (відповідний до параметру ваговозу чи місця для парковки), потім виконується три вимірювання і по ним вираховується середнє значення та похибка за формулами. Кінцевими параметрами, які надсилаються до нашого додатку на Python є середнє значення з урахуванням похибки.
Серверний додаток на Python написаний за допомогою фреймворку Flask, приймає дані від Arduino через Serial порт, обробляє ці дані, створює об'єкти класів Truck та ParkingPlace та надсилає відповідні дані у відповідь на запит, та надсилає запити на оновлення даних ваговозу чи місця для парковки на бекенд.[7] Flask - це легковагий фреймворк для створення веб-додатків на мові програмування Python. Він дозволяє швидко створювати веб-додатки з мінімальними зусиллями, але при цьому надає потужні можливості для розширення і розвитку проектів. Усі запити повинні бути авторизовані за допомогою bearer токенів, тому код містить ще перевірку та парсинг токену, та усі запити виконуються за допомогою REST, HTTP запитів.
Основний функціонал  реалізує логіку системи отримання оновлених даних ваговозів та місць для парковки у реальному часі. На діаграмі прецедентів відображено основну логіку розумного пристрою, функціональність системи та взаємодію користувачів з нею (див. Додаток Б). Реалізовано основну логіку:
-	Отримання даних від датчиків.
-	Обробка даних від датчика температури та звуку, переведення їх з одного діапазону значень до діапазону параметрів ваговозу та місць для парковки.
-	Обробка параметрів ваговозів та місць для парковки за допомогою трьох вимірювань, обчислення похибки та середнього значення.
-	Валідація та обробка отриманих даних.
-	Відправка даних як результат запиту та надсилання запитів до бекенду.
Діаграма взаємодії надає загальне уявлення про послідовність інтеракцій між об'єктами, компонентами та модулями системи (див. Додаток Б). Діаграма діяльності показує послідовність дій або операцій, які виконуються у системі. Вона демонструє, які елементи взаємодії виконують роботу в процесі, що і як вони виконують (див. Додаток Б). Діаграма станів моделює різні стани, в яких може перебувати об'єкт, система або компонент у системі (див. Додаток Б). Вона показує переходи між цими станами, події або умови, що спричиняють переходи між ними, і дії, які відбуваються при цих переходах.
Під час реалізації цього функціоналу було дотримано правил чистого коду.
Дотримання назв класів, методів та змінних та використання описових назв, які чітко відображають їхню функціональність.
Використання стандартних правил форматування, правильна відступів, розташування дужок тощо.
Функції є невеликими та виконують одну конкретну задачу. Класи також мають чітко визначену відповідальність.

6.2 Специфікація запитів

Розумний пристрій взаємодіє з сервісною частиною через REST API, надсилаючи HTTP-запити. REST API в проекті складається із 6 запитів. Кожний запит відповідає за надання даних клієнту та виконання бізнес логіки.
Специфікація кожного запиту наведена у таблиці 1.
Таблиця 1 – Специфікація REST API
Об’єкт	Метод	Посилання	Опис
Ваговіз	POST	/connect/truck	Підключення до датчиків як менеджер ваговозів
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}	Оновлення даних ваговозу
	GET	/truck/get-data	Отримання оновлених даних ваговозу
Місце для парковки	POST	/connect/parking-place	Підключення до датчиків як менеджер парковки
	PATCH	/api/parking-manager/{user-id}/parking-places/{place-id}	Оновлення даних місця для парковки
	GET	/parking-place/get-data	Отримання оновлених даних місця для парковки

7 РОЗРОБКА КЛІЄНТСЬКОЇ СИСТЕМИ
7.1 Архітектура системи

Angular обрано як основний фреймворк для розробки фронтенд частини системи. Він забезпечує швидку конфігурацію, дозволяючи швидко створювати потужні веб-додатки. Для комунікації з бекендом використовується REST API, що дозволяє виконувати запити до сервера для отримання та обробки даних. HttpClient використовується для надсилання HTTP-запитів, що забезпечує простоту та ефективність у роботі з API.
Для забезпечення багатомовності інтерфейсу використовується механізм i18n, що дозволяє легко додавати підтримку нових мов та адаптувати інтерфейс для різних регіонів. Це забезпечує можливість користувачам взаємодіяти з додатком їх рідною мовою. Усі дані в проекті обробляються з використанням кодування UTF-8. Це дозволяє коректно обробляти різноманітні символи та забезпечує сумісність з різними мовами та алфавітами.[8] Використання ISO 8601 в проекті відповідає міжнародним стандартам та рекомендаціям, що сприяє сумісності програмного забезпечення з іншими системами та середовищами
Bootstrap обрано для створення адаптивного та зручного дизайну. Використання готових компонентів та стилів Bootstrap дозволяє швидко розробляти сучасні інтерфейси, що забезпечують приємний користувацький досвід на різних пристроях.
Для авторизації та автентифікації користувачів використовується механізм bearer токенів. JWT (JSON Web Tokens) токени зберігаються у локальному сховищі браузера після успішного входу користувача. Ці токени додаються до заголовків HTTP-запитів, що забезпечує безпеку та контроль доступу до захищених ресурсів.
Архітектура фронтенд частини побудована з урахуванням принципів модульності. Логіка додатку була поділена на кілька пакетів, їх можна наглядно розглянути на діаграмі пакетів у Додаток В:
_components: містить всі компоненти додатку.
_models: містить всі моделі даних.
_services: містить всі сервіси для обробки бізнес-логіки та взаємодії з бекендом.
Компоненти є основними будівельними блоками інтерфейсу користувача. Вони відповідають за конкретні частини UI та містять відповідну логіку. Сервіси використовуються для обробки бізнес-логіки та взаємодії з бекендом, що дозволяє тримати компоненти чистими та простими, компоненти можна розглянути на діаграмі компонентів у Додаток В.
Для навігації між різними сторінками додатку використовується Angular Router. Маршрути визначаються у файлі маршрутизації та дозволяють визначити, які компоненти повинні завантажуватися для конкретних URL.
Дотримання принципів чистого коду та використання сучасних інструментів дозволяє створювати ефективні та підтримувані додатки. Використання Angular, HttpClient, i18n та Bootstrap забезпечує високу якість фронтенд частини системи, що легко розширюється та підтримується. Авторизація за допомогою JWT токенів гарантує належний рівень безпеки при доступі до системи.


7.2 Бізнес логіка


Основний функціонал  реалізує логіку системи для розумної парковки безпілотних ваговозів, яка надає можливість ввести зручно документацію, обирати місця для паркування та відстежувати параметри ваговозів та місць у реальному часі. На діаграмі прецедентів відображено основну логіку серверної системи, функціональність системи та взаємодію користувачів з нею (див. Додаток В). Основні функції реалізовані у додатку:
–	Авторизація за допомогою OAuth2 з використанням JWT токенів, що дозволяє захищати ресурси та контролювати доступ до них з використанням токенів авторизації, що забезпечує безпеку та контроль над даними.
–	Можливість адмінів переглядати усіх водіїв та менеджерів та видаляти їх.
–	Можливість адмінів переглядати затверджених та відхилених адмінів.
–	Можливість адмінів додавати адмінів.
–	Можливість адмінів робити експорт та імпорт бази даних.
–	Можливість головного адміна переглядати історію операцій над базою даних.
–	Можливість головного адміна вказувати хост для підключення розумного пристрою до серверної частини проекту.
–	Можливість адмінів робити експорт історії операцій над базою даних у вигляді pdf файлу.
–	Можливість головного адміна затверджувати та відхиляти нових адмінів.
–	Менеджери ваговозів мають можливість додавати, переглядати та оновлювати інформацію про ваговози.
–	Менеджери парковок мають можливість додавати, переглядати та оновлювати інформацію про місця для паркування.
–	Менеджери ваговозів мають можливість створювати різних типів (паркування, завантаження, вивантаження) накладні.
–	Менеджери можуть підписувати накладні, спочатку менеджер парковки, а потім лише менеджер ваговоза.
–	Менеджери мають можливість завантажувати підписані накладні у вигляді pdf файлів.
–	Менеджери ваговозів можуть отримувати інформацію в реальному часі про показники/параметри ваговозі.
–	Менеджери парковки можуть отримувати інформацію в реальному часі про показники/параметри місць для паркування.
Описані функції відображають основні можливості та процеси, які автоматизують  контроль за документацією та станом ваговозів та місць для паркування та запобігає надзвичайним ситуаціям, що можуть виникнути в під час паркування за допомогою розрахунку найкращого місця для паркування за допомогою параметрів та визначення кута заїзду, логіку взаємодії можна розглянути на діаграмі взаємодії у Додаток В.
Під час реалізації цього функціоналу було дотримано правил чистого коду. Це включало:
Чітку структуру проекту: проект був структурований таким чином, щоб забезпечити логічну організацію файлів і директорій. Компоненти, моделі та сервіси були розподілені по відповідних пакетах
Принцип єдиного завдання: Кожен компонент, сервіс та модель виконували конкретне завдання, що забезпечувало чистоту та простоту коду.
Іменування: Використовувались зрозумілі та інтуїтивні імена для всіх компонентів, сервісів та моделей, що полегшувало розуміння та підтримку коду.
Інкапсуляція та абстракція: Логіка взаємодії з бекендом була інкапсульована у сервісах, що дозволяло зберігати компоненти простими та сфокусованими на відображенні даних.
Локалізація: Використання i18n для локалізації забезпечувало можливість легко додавати нові мови та адаптувати інтерфейс для різних регіонів, що підвищувало доступність додатку.
Дотримання стилю коду: Використовувалися інструменти для автоматичного форматування коду, що забезпечувало консистентний стиль коду по всьому проекту.
Дотримання цих правил дозволило створити якісну фронтенд частину системи, що відповідає сучасним стандартам розробки веб-додатків. Це забезпечило легкість в підтримці та розширенні додатку, високу продуктивність і зручність використання для кінцевих користувачів.

7.3 Специфікація запитів

Клієнти взаємодіють з сервісною частиною через REST API, надсилаючи HTTP-запити. REST API в проекті складається із 57 запитів. Кожний запит відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного запиту наведена у таблиці 1.
Таблиця 1 – Специфікація REST API
Об’єкт	Метод	Посилання	Опис
Користувач	POST	/login	Вхід до системи
Всі адміни	GET	/api/admins/{admin-id}	Отримання профілю адміна
	POST	/api/admins/{admin-id}/add/{email}	Додавання адміна
	GET	/api/admins/{admin-id}/truck-managers	Отримання усіх менеджерів ваговозів
	GET	/api/admins/{admin-id}/parking-managers	Отримання усіх менеджерів парковок
	DELETE	/api/admins/{admin-id}/truck-managers/{truck-manager-id}	Видалення менеджера ваговозів
	DELETE	/api/admins/{admin-id}/parking-managers/{parking-manager-id}	Видалення менеджера парковок
	GET	/api/admins/approved	Отримання усіх затверджених адмінів
	GET	/api/admins/not-approved	Отримання усіх не затверджених адмінів
	GET	/api/admins/{admin-id}/db/export	Експорт бази даних
	POST	/api/admins/{admin-id}/db/import	Імпорт бази даних
Головний адмін	POST	/api/admins/{admin-id}/approve/{new-admin-id}	Затвердження нового адміна
	POST	/api/admins/{admin-id}/decline/{new-admin-id}	Відхилення нового адміна
	GET	/api/admins/{admin-id}/db/history	Перегляд історії операцій над базою даних
Адмін	PATCH	/api/admins/{admin-id}	Оновлення профілю адміна
Менеджер ваговозів	POST	/api/truck-manager/register	Реєстрація менеджера ваговозів
	GET	/api/truck-manager/{user-id}	Отримання профілю менеджера ваговозів
	PATCH	/api/truck-manager/{user-id}	Редагування профілю менеджера ваговозів
	DELETE	/api/truck-manager/{user-id}	Видалення менеджера ваговозів
	POST	/api/truck-manager/{user-id}/trucks	Додавання ваговозу
	GET	/api/truck-manager/{user-id}/trucks/{truck-id}	Отримання профілю ваговозу
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}	Оновлення профілю ваговоза
	DELETE	/api/truck-manager/{user-id}/trucks/{truck-id}	Видалення ваговозу
	GET	/api/truck-manager/{user-id}/trucks	Отримання усіх ваговозів компанії
	GET	/api/truck-manager/{user-id}/trucks/without-manager	Отримання усіх ваговозів компанії без менеджера
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/remove-manager	Видалення менеджера ваговозу
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/add-manager	Додавання менеджера ваговозу
	PATCH	/api/truck-manager/{user-id}/company/{company-id}	Зміна компанії менеджера ваговозів
	GET	/api/truck-manager/{user-id}/trucks/{truck-id}/companies/{company-id}/search-place	Пошук найкращого місця для ваговозу
	POST	/api/truck-manager/{user-id}/invoices	Створення накладної
	PATCH	/api/truck-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером ваговозів
	GET	/api/truck-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
	GET	/api/truck-manager/{user-id}/invoices	Отримання усіх накладних менеджера ваговозів
	GET	/api/truck-manager/{user-id}/invoices/truck-number/{truck-number}	Пошук накладної за номером ваговозу
	GET	/api/truck-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
	GET	/api/truck-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
	GET	/api/truck-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів
Менеджер парковок	POST	/api/parking-manager/register	Реєстрація менеджера парковок
	GET	/api/parking-manager/{user-id}	Отримання профілю менеджера парковок
	PATCH	/api/parking-manager/{user-id}	Редагування профілю менеджера парковок
	DELETE	/api/parking-manager/{user-id}	Видалення менеджера парковок
	PATCH	/api/parking-manager/{user-id}/company/{company-id}	Зміна компанії менеджера парковок
	POST	/api/parking-manager/{user-id}/parking-places	Додавання місця для паркування
	GET	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Отримання профілю місця для паркування
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Оновлення профілю місця паркування
	DELETE	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Видалення місця паркування
	GET	/api/parking-manager/{user-id}/parking-places	Отримання усіх місць для паркування компанії
	GET	/api/parking-manager/{user-id}/parking-places/without-manager	Отримання усіх місць для паркування без менеджера компанії
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}/remove-manager	Видалення менеджера місця для паркування
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}/add-manager	Додавання менеджера місця паркування
	PATCH	/api/parking-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером парковок
	GET	/api/parking-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
	GET	/api/parking-manager/{user-id}/invoices	Отримання усіх накладних менеджера парковок
	GET	/api/parking-manager/{user-id}/invoices/place-number/{place-number}	Пошук накладної за номером місця паркування
	GET	/api/parking-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
	GET	/api/parking-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
	GET	/api/parking-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів

8 РОЗРОБКА МОБІЛЬНОГО ДОДАТКУ
8.1 Архітектура системи та бізнес логіка

Kotlin обрано як основну мову програмування для розробки мобільного додатку. Вона забезпечує високу продуктивність, зручний синтаксис та чудову інтеграцію з платформою Android. [9] Архітектура мобільного додатку реалізована як моноліт з розподіленою логікою між різними пакетами, що забезпечує модульність та легкість у підтримці. Основні пакети включають, можна також їх розглянути на діаграмі пакетів у Додаток Г:
model, що містить класи для формування запитів (request) та обробки відповідей (response);
service, що містить бізнес-логіку додатку, обробку даних та взаємодію з репозиторіями даних;
ui, що включає активності (activity) для різних екранів додатку та адаптери (adapter) для роботи з компонентами користувацького інтерфейсу, такими як RecyclerView;
util, що містить допоміжні класи та функції для роботи з мережею, перетворення даних тощо.
JWT Bearer Tokens використовуються для авторизації користувачів у мобільному додатку. Після успішного входу користувач отримує токен, який зберігається локально та додається до заголовків HTTP-запитів для забезпечення безпеки та перевірки автентичності на сервері. Для надсилання HTTP-запитів використовується Retrofit. Цей клієнт дозволяє зручно створювати та обробляти запити до бекенду, використовуючи аннотації для визначення типів запитів та параметрів. Retrofit забезпечує легке перетворення відповідей у моделі даних, що спрощує роботу з API.
Для зручного підключення до локального сервера бекенду використовується ngrok. Він створює безпечний тунель, через який мобільний додаток надсилає запити до бекенду, що дозволяє розробникам тестувати додаток у реальних умовах без необхідності розгортати сервер у публічному інтернеті. Спілкування з бекендом відбувається через RESTful HTTP API, що забезпечує стандартизовану взаємодію між фронтендом і бекендом та дозволяє легко масштабувати і розширювати систему.
У додатку реалізована система обробки та відловлення помилок. За допомогою try-catch блоків відловлюються виключення, що виникають під час виконання HTTP-запитів. Користувач отримує локалізовані повідомлення про помилки, що покращує досвід взаємодії з додатком. Наприклад, при помилці 401 Unauthorized користувачеві відображається повідомлення про несанкціонований доступ. Додаток підтримує локалізацію на українську та англійську мови. Для цього використовуються окремі ресурсні файли: res/values/strings.xml для англійської мови та res/values-uk/strings.xml для української мови. Локалізація дозволяє відображати текстові повідомлення, помилки та інші елементи інтерфейсу на мові, обраній користувачем, що підвищує зручність використання додатку для різних мовних груп.
Під час розробки додатку було дотримано правил чистого коду. Це означає, що код є зрозумілим, легко підтримуваним та масштабованим. Всі компоненти організовані логічно, імена змінних, функцій та класів є інформативними та описовими. Використання принципів SOLID, DRY та KISS дозволило створити кодову базу, яка є простою для розуміння та подальшої розробки.
Використання Kotlin, JWT Bearer Tokens, Retrofit, ngrok та RESTful API дозволяє створити ефективний та зручний мобільний додаток. Архітектура моноліту з розподіленою логікою між пакетами model, service, ui та util забезпечує модульність і легкість у підтримці. Система обробки помилок та локалізація забезпечують високий рівень користувацького досвіду, роблячи додаток доступним для широкої аудиторії. Дотримання принципів чистого коду під час розробки гарантує, що додаток залишатиметься зрозумілим та підтримуваним у довгостроковій перспективі.
Основний функціонал  реалізує логіку системи для розумної парковки безпілотних ваговозів, яка надає можливість ввести зручно документацію, обирати місця для паркування та відстежувати параметри ваговозів та місць у реальному часі. На діаграмі прецедентів відображено основну логіку серверної системи, функціональність системи та взаємодію користувачів з нею (див. Додаток Г). Основні функції реалізовані у додатку:
–	 Авторизація за допомогою OAuth2 з використанням JWT токенів, що дозволяє захищати ресурси та контролювати доступ до них з використанням токенів авторизації, що забезпечує безпеку та контроль над даними.
–	Менеджери ваговозів мають можливість переглядати та оновлювати інформацію про ваговози.
–	Менеджери парковок мають можливість переглядати та оновлювати інформацію про місця для паркування.
–	Менеджери ваговозів мають можливість переглядати накладні.
–	Менеджери можуть підписувати накладні, спочатку менеджер парковки, а потім лише менеджер ваговоза.
–	Менеджери мають можливість завантажувати підписані накладні у вигляді pdf файлів.
–	Менеджери ваговозів можуть отримувати інформацію в реальному часі про показники/параметри ваговозі.
–	Менеджери парковки можуть отримувати інформацію в реальному часі про показники/параметри місць для паркування.
Описані функції відображають основні можливості та процеси, які автоматизують  контроль за документацією та станом ваговозів та місць для паркування та запобігає надзвичайним ситуаціям, що можуть виникнути в під час паркування за допомогою розрахунку найкращого місця для паркування за допомогою параметрів та визначення кута заїзду, логіку взаємодії можна розглянути на діаграмі компонентів у Додаток Г, дозволяє відобразити компоненти програмного забезпечення, бібліотеки, модулі, файли конфігурації та інші ресурси, які утворюють систему. ER-діаграма дозволяє відображати структуру баз даних, їх елементи та взаємозв'язки між ними (див. Додаток Г). Діаграма пакетів дозволяє групувати елементи моделі у вигляді пакетів та відображати залежності між ними (див. Додаток Г).
Під час реалізації цього функціоналу було дотримано правил чистого коду.
Дотримання назв класів, методів та змінних та використання описових назв, які чітко відображають їхню функціональність.
Використання стандартних правил форматування, правильна відступів, розташування дужок тощо.
Функції є невеликими та виконують одну конкретну задачу. Класи також мають чітко визначену відповідальність.

8.2 Специфікація запитів

Мобільний додаток взаємодіє з сервісною частиною через REST API, надсилаючи HTTP-запити. REST API в проекті складається із 21 запитів. Кожний запит відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного запиту наведена у таблиці 1.
Таблиця 1 – Специфікація REST API
Об’єкт	Метод	Посилання	Опис
Менеджер ваговозів	POST	/api/truck-manager/register	Реєстрація менеджера ваговозів
	GET	/api/truck-manager/{user-id}	Отримання профілю менеджера ваговозів
	PATCH	/api/truck-manager/{user-id}	Редагування профілю менеджера ваговозів
	DELETE	/api/truck-manager/{user-id}	Видалення менеджера ваговозів
	POST	/api/truck-manager/{user-id}/trucks	Додавання ваговозу
	GET	/api/truck-manager/{user-id}/trucks/{truck-id}	Отримання профілю ваговозу
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}	Оновлення профілю ваговоза
	DELETE	/api/truck-manager/{user-id}/trucks/{truck-id}	Видалення ваговозу
	GET	/api/truck-manager/{user-id}/trucks	Отримання усіх ваговозів компанії
	GET	/api/truck-manager/{user-id}/trucks/without-manager	Отримання усіх ваговозів компанії без менеджера
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/remove-manager	Видалення менеджера ваговозу
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/add-manager	Додавання менеджера ваговозу
	PATCH	/api/truck-manager/{user-id}/company/{company-id}	Зміна компанії менеджера ваговозів
	GET	/api/truck-manager/{user-id}/trucks/{truck-id}/companies/{company-id}/search-place	Пошук найкращого місця для ваговозу
	PATCH	/api/truck-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером ваговозів
	GET	/api/truck-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
	GET	/api/truck-manager/{user-id}/invoices	Отримання усіх накладних менеджера ваговозів
	GET	/api/truck-manager/{user-id}/invoices/truck-number/{truck-number}	Пошук накладної за номером ваговозу
	GET	/api/truck-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
	GET	/api/truck-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
	GET	/api/truck-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів

ВИСНОВКИ

У результаті виконання даної курсової роботи було розроблено програмну систему для розумної парковки безпілотних ваговозів. В процесі роботи було проведено аналіз існуючих рішень в сфері автоматизованого паркування та безпілотних фур, що дозволило визначити ключові вимоги до системи та її архітектури.
Розробка архітектури системи включала проектування backend, frontend, IoT та mobile компонентів, що забезпечують комплексне вирішення задачі автоматизованого паркування.[10] На етапі реалізації було створено ефективну backend частину, яка відповідає за обробку даних та управління паркувальними місцями, а також зручний і інтуїтивно зрозумілий frontend інтерфейс для користувачів. IoT компоненти забезпечили збір та передачу даних про стан паркувальних місць та рух фур, що дозволило створити надійну систему автоматизованого паркування. Mobile додаток надав користувачам можливість взаємодіяти з системою через мобільні пристрої, що значно підвищило її доступність та зручність у використанні.
Під час тестування системи було підтверджено її високу ефективність та надійність. Система дозволяє значно скоротити час паркування та виїзду фур, підвищити пропускну здатність складів і терміналів, а також зменшити ризики пошкодження фур та складського обладнання. Використання безпілотних фур та автоматизованого паркування сприяє зниженню витрат логістичних компаній та підвищенню безпеки перевезень.
Таким чином, розробка програмної системи для розумної парковки безпілотних ваговозів вирішує важливі проблеми сучасної логістичної галузі та надає значні переваги у вигляді економії часу, коштів та підвищення безпеки. Дана система має великий потенціал для подальшого розвитку та впровадження у різноманітні логістичні компанії, що дозволить ще більше покращити ефективність їх діяльності.
Подальший розвиток системи може включати інтеграцію з іншими логістичними системами, розширення функціоналу для обробки ще більшого обсягу даних та впровадження нових технологій для підвищення надійності та продуктивності системи. Результати даної роботи свідчать про те, що автоматизоване паркування безпілотних фур є перспективним напрямком розвитку логістичної галузі та має значний потенціал для подальших досліджень і впроваджень.
Посилання на код на GitHub: https://github.com/NureKazantsevaSofiia/apzkr-pzpi-21-5-kazantseva-sofiia
Посилання на відео на YouTube: https://www.youtube.com/watch?v=r6U2WtJMYE4
